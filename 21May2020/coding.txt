1.Write a C program to construct a singly linked list by removing duplicate elements in the sorted linked list
Description:
Take a sorted list and traverse the list. Compare the current node element with next adjacent node. If it is same then delete second element, if not retain. Finally print the resulting list.
Sample output:
Given list {1,2,2,3,3,3,4}
Resulting list{1,2,3,4}


#include<stdio.h> 
#include<stdlib.h> 
struct Node{
    int data;
    struct Node* next;
};
int removeduplicates(struct Node* head)
{
    struct Node* current=head;
    struct Node* nextele;
    if(current==NULL)
    return 0;
    while(current->next!=NULL)
    {
        if(current->data==current->next->data)
        {
            nextele=current->next->next;
            free(current->next);
            current->next=nextele;
        }
        else
        current=current->next;
    }
}
void push(struct Node** head_ref,int new_data)
{
    struct Node* new_node=(struct Node*)malloc(sizeof(struct Node));
    new_node->data=new_data;
    new_node->next=(*head_ref);
    (*head_ref)=new_node;
}
void print(struct Node *node)
{
    while(node!=NULL)
    {
        printf("%d",node->data);
        node=node->next;
    }
}
int main()
{
    
    struct Node* head=NULL;
    push(&head, 4);
    push(&head, 3);
    push(&head, 3);
    push(&head, 3);
    push(&head, 2);
    push(&head, 2);
    push(&head, 1);
    printf("Linked list before removing ");
    print(head);
    removeduplicates(head);
     printf("\nLinked list after removing ");
     print(head);
    return 0;
}



2.Create the SLL, and then Reverse the Link in SLL until Head becomes NULL. Each Time Reversing the Link, Head must be moved to next immediate node.



#include <stdio.h> 
#include <stdlib.h>
struct Node{
    int data;
    struct Node* next;
};
void reverse(struct Node** head_reaf)
{
    struct Node* prev=NULL;
    struct Node* next=NULL;
    struct Node* current=*head_reaf;
    while(current!=NULL)
    {
        next=current->next;
        current->next=prev;
        prev=current;
        current=next;
    }
    *head_reaf=prev;
}
void push(struct Node** head_reaf,int new_data)
{
    struct Node* new_node=(struct Node*)malloc(sizeof(struct Node*));
    new_node->data=new_data;
    new_node->next=(*head_reaf);
    (*head_reaf)=new_node;
}
void print(struct Node* head)
{
    while(head!=NULL)
    {
        printf("%d ",head->data);
        head=head->next;
    }
}
int main()
{
    struct Node* head=NULL;
    push(&head,4);
    push(&head,9);
    push(&head,6);
    push(&head,5);
    printf("Linked list before reversing ");
    print(head);
    reverse(&head);
    printf("\nLinked list bafter reversing ");
    print(head);
}


3.write a simple applet java program to check whether the given number is armstrong number or no
import java.util.Scanner;
public class Astro {

    public static void main(String[] args) {

        int num, number, temp, total = 0;
        System.out.println("Ã‹nter 3 Digit Number");
        Scanner scanner = new Scanner(System.in);
        num = scanner.nextInt();
        scanner.close();
        number = num;

        for( ;number!=0;number /= 10)
        {
            temp = number % 10;
            total = total + temp*temp*temp;
        }

        if(total == num)
            System.out.println(num + " is an Armstrong number");
        else
            System.out.println(num + " is not an Armstrong number");
    }
}



