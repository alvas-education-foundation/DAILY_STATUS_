1. Python program to calculate the number of lowercase and uppercase letters in a string
Description:
Take a string as input and find the number of uppercase and lower case letters in the string and print the count.
Note: any spaces has to be ignored
Eg: string is : 'This is Python'
Upper case characters : 2
Lower case characters : 10

def string_test(s):
    d={"UPPER_CASE":0, "LOWER_CASE":0}
    for c in s:
        if c.isupper():
           d["UPPER_CASE"]+=1
        elif c.islower():
           d["LOWER_CASE"]+=1
        else:
           pass
    print ("Original String : ", s)
    print ("Upper case characters : ", d["UPPER_CASE"])
    print ("Lower case Characters : ", d["LOWER_CASE"])

string_test('This is Python')


2.We are given 3 strings: str1, str2, and str3. Str3 is said to be a shuffle of str1 and str2 if it can be formed by interleaving the characters of str1 and str2 in a way that maintains the left to right ordering of the characters from each string. For example, given str1="abc" and str2="def", str3="dabecf" is a valid shuffle since it preserves the character ordering of the two strings. So, given these 3 strings write a function that detects whether str3 is a valid shuffle of str1 and str2.

class Shuffle 
{
	public static void main(String[] args) 
	{
		String s1="abc";
		String s2="def";
		String s3="dabecf";
		System.out.println("str1="+s1);
		System.out.println("str2="+s2);
		System.out.println("str3="+s3);
			if(s3.indexOf('d')<s3.indexOf('e') && s3.indexOf('e')<s3.indexOf('f'))
			{
				if(s3.indexOf('a')<s3.indexOf('b') && s3.indexOf('b')<s3.indexOf('c'))
				{
					System.out.println("str3 is a valid shuffle");
				}
			}
			else
			System.out.println("str3 is not a valid shuffle");
	
		
	}
}


3.Write a Java Program to check whether the given number is Armstrong number or not


import java.util.*;
class ArmstrongNumber 
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the number");
		int n=sc.nextInt();
		int num=n,count=0,sum=0;
		while(n!=0)
		{
			count++;
			n=n/10;
		}
		n=num;
		while(n!=0)
		{
			int i=count;
			int rem=n%10;
			n=n/10;
			int r=1;
			while(i!=0)
			{
				
				r=r*rem;
				i--;
			}
			sum+=r;
		}
		if(sum==num)
			System.out.println(num+" is a Armstrong Number");
		else
			System.out.println(num+" is not a Armstrong Number");
	}
}


4.Write a Java Program to find longest substring without repeating characters in a string.


import java.util.LinkedHashMap;

 

public class Main

{              static void longestSubstring(String inputString)

               {
                  char[] charArray = inputString.toCharArray();
                    String longestSubstring = null;
                    int longestSubstringLength = 0;
                    LinkedHashMap<Character, Integer> charPosMap = new LinkedHashMap<Character, Integer>();
                     for (int i = 0; i < charArray.length; i++)
                      {
                             char ch = charArray[i];
                            if(!charPosMap.containsKey(ch))
                            {
                                 charPosMap.put(ch, i);
                            }
                             else
                            {             
                              i = charPosMap.get(ch);

                                charPosMap.clear();
                            }
                            if(charPosMap.size() > longestSubstringLength)
                             {
                                 longestSubstringLength = charPosMap.size();
                                    longestSubstring = charPosMap.keySet().toString();

                              }

                              }
                              System.out.println("Input String : "+inputString);
                              System.out.println("The longest substring : "+longestSubstring);
                              System.out.println("The longest Substring Length : "+longestSubstringLength);

               }
               public static void main(String[] args)

               {             
                     longestSubstring("longestSubstringLength");
                }             

}