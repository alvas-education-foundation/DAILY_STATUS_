1.Write a Java program to find the maximum and minimum value node from a circular linked list.
Description:-
Algorithm
Define a Node class which represents a node in the list. It has two properties data and next which will point to the next node.
Define another class for creating the circular linked list and it has two nodes: head and tail.
minNode() will print out minimum value node:
Define variable min and initialize with head's data.
Current will point to head.
Iterate through the list by comparing each node's data with min.
If min > current's data then min will hold current's data.
At the end of the list, variable min will hold the minimum value node.
Print the min value.

maxNode() will prints out maximum value node:
Define variable max and initialize with head's data.
Current will point to head.
Iterate through the list by comparing each node's data with max.
If max > current's data then max will hold current's data.
At the end of the list, variable max will hold the maximum value node.
Print the max value.

public class Main {  
        class Node{  
        int data;  
        Node previous;  
        Node next;  
        public Node(int data) {  
        this.data = data;  
        }  
    }  
    Node head, tail = null;  
    public void addNode(int data) {  
       Node newNode = new Node(data);  
        if(head == null) {  
          head = tail = newNode;  
            head.previous = null;  
            tail.next = null;  
        }  
        else {  
            tail.next = newNode;  
            newNode.previous = tail;  
            tail = newNode;  
            tail.next = null;  
        }  
    }  
    public int minimumNode() {  
        Node current = head;  
        int min;  
        if(head == null) {  
            System.out.println("List is empty");  
            return 0;  
        }  
        else {  
            min = head.data;  
            while(current != null) {  
                if(min > current.data)  
                    min = current.data;  
                current = current.next;  
            }  
        }  
        return min;  
    }  
     
    public int maximumNode() {  
        Node current = head;  
        int max;  
        if(head == null) {  
            System.out.println("List is empty");  
            return 0;  
        }  
        else {  
            max = head.data;  
             while(current != null) {  
                if(current.data > max)   
                    max = current.data;  
                current = current.next;  
            }  
        }  
        return max;  
    }  
      public static void main(String[] args) {  
        Main dList = new Main();  
        dList.addNode(9);  
        dList.addNode(5);  
        dList.addNode(1);  
        dList.addNode(4);  
        dList.addNode(2);  
        System.out.println("Minimum value node in the list: "+ dList.minimumNode());  
       System.out.println("Maximum value node in the list: "+ dList.maximumNode());  
    }  
}



2.Write a C Program to print the sum of boundary elements of a matrix.
Description:-
Given a matrix, the task is to print the boundary elements of the matrix and display their sum.
Sample Output 1:
Enter M (Rows) and N (Columns): 3, 3
Enter the Elements: 1 2 3 4 5 6 7 8 9
OUTPUT:
The Input Matrix is:
1 2 3
4 5 6
7 8 9
The Boundary Elements are: 1 2 3 4 6 7 8 9
The Sum of Boundary elements of the Matrix is: 40

Sample Output 2:
Enter M (Rows) and N (Columns): 4, 5
Enter the Elements: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
OUTPUT:
The Input Matrix is:
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
17 18 19 20
The Boundary Elements are: 1 2 3 4 5 8 9 12 13 16 17 18 19 20
The Sum of Boundary elements of the Matrix is: 147

3.Write a python program to check whether a given number is a fibonacci number or not.
Description:-
Input number : 8
Output: 8 is a fibonacci number
Input number : 4
Output: 4 is not a fibonacci number

import math
def checkPerfectSquare(n):
    sqrt = int(math.sqrt(n))
    if pow(sqrt, 2) == n:
        return True
    else:
        return False
def isFibonacciNumber(n):
    res1 = 5 * n * n + 4
    res2 = 5 * n * n - 4
    if checkPerfectSquare(res1) or checkPerfectSquare(res2):
        return True
    else:
        return False
num = int(input("Enter an integer number: "))
if isFibonacciNumber(num):
    print (num, "is a Fibonacci number")
else:
    print (num, "is not a Fibonacci number")
